{"version":3,"sources":["postControllers.js"],"names":["post_get_all","req","res","posts","Post","find","sort","createdAt","json","data","status","message","post_create","body","title","content","post","save","error","post_get_one","findOne","_id","params","id","post_update","length","post_delete","findById","remove"],"mappings":"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","sourceRoot":"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/controllers/","sourcesContent":["// import models\nimport {Post} from '../models/Post'\n\n\n\n// get all posts\nconst post_get_all = async (req, res) => {\n\tconst posts = await Post.find().sort({createdAt: -1})\n\treturn res.json({data:posts, status:200, message:\"Fetched successfully\"})\n}\n\n// create new post\nconst post_create = async (req, res) => {\n\ttry {\n\t\tif(req.body.title === '' || req.body.content === ''){\n\t\t\treturn res.status(400).json({message:\"Title and content are required\"})\n\t\t}\n\t\telse{\n\t\t\tconst post = new Post({\n\t\t\t\ttitle: req.body.title,\n\t\t\t\tcontent: req.body.content\n\t\t\t\t\n\t\t\n\t\t\t})\n\t\t\tawait post.save()\n\t\n\t\t\treturn res.status(201).json({status:201, message:\"Post Saved successfully\"})\n\t\t}\n\t} catch (error) {\n\t\treturn res.status(403).json({message:\"Invalid token\"})\n\t}\n\t\n\t\n}\n\n// get individual post\nconst post_get_one = async (req, res) => {\n\ttry {\n\t\tconst post = await Post.findOne({ _id: req.params.id })\n\n\t\tif(post === null){\n\t\t\treturn res.status(404).json({message:\"Post of that id is not available\"});\n\t\t}\n\n\t\treturn res.status(200).json({data:post, message:\"successfully fetched\"});\n\n\t} catch {\n\t\treturn res.status(404).json({error: \"Post does not exist!\"})\n\t}\n}\n\n// update a post\nconst post_update = async (req, res) => {\n\ttry {\n\t\tconst post = await Post.findOne({ _id: req.params.id })\n\n\t\tif (req.body.title.length > 0 && req.body.content.length > 0) {\n\t\t\tpost.title = req.body.title,\n\t\t\tpost.content = req.body.content\n\n\n\t\t\tawait post.save()\n\t\t\treturn res.status(200).json({message:\"Post successfully updated!\"});\n\t\t}\n\t\telse{\n\t\t\treturn res.status(400).json({message:\"Title and content need value!\"});\n\t\t}\n\n\t} catch {\n\t\treturn res.status(404).json({error: \"Post doesn't exist!\"})\n\t}\n}\n\n// delete a post\nconst post_delete = async (req, res) => {\n\ttry {\n\t\tconst post = await Post.findById(req.params.id)\n\t\tif(post != null){\n\n\t\t\tawait post.remove();\n\t\t\treturn res.status(200).json({message: \"Post deleted successfully!\"})\n\t\t}\n\t\telse{\n\t\t\treturn res.status(404).json({error: \"Post doesn't exist!\"})\n\t\t}\n\n\t\t\n\t} catch {\n\t\treturn res.status(500).json({error: \"Server error\"})\n\t}\n}\n\n\n\nexport {post_get_all, post_create, post_get_one, post_update, post_delete}\n"]}