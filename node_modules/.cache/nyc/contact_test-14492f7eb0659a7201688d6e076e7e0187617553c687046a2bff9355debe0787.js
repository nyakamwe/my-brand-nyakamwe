"use strict";function cov_1oltzlcx68(){var path="/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/contact_test.js";var hash="42fe74754d5401b46dcb63dd44878141259e250a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/contact_test.js",statementMap:{"0":{start:{line:3,column:16},end:{line:3,column:59}},"1":{start:{line:5,column:12},end:{line:5,column:51}},"2":{start:{line:7,column:13},end:{line:7,column:56}},"3":{start:{line:9,column:16},end:{line:9,column:60}},"4":{start:{line:11,column:12},end:{line:11,column:37}},"5":{start:{line:13,column:13},end:{line:13,column:53}},"6":{start:{line:15,column:12},end:{line:15,column:37}},"7":{start:{line:17,column:39},end:{line:17,column:93}},"8":{start:{line:19,column:0},end:{line:19,column:27}},"9":{start:{line:24,column:0},end:{line:24,column:23}},"10":{start:{line:26,column:0},end:{line:26,column:37}},"11":{start:{line:28,column:0},end:{line:100,column:3}},"12":{start:{line:29,column:2},end:{line:42,column:5}},"13":{start:{line:31,column:18},end:{line:31,column:161}},"14":{start:{line:33,column:4},end:{line:41,column:7}},"15":{start:{line:37,column:6},end:{line:37,column:35}},"16":{start:{line:38,column:6},end:{line:38,column:13}},"17":{start:{line:40,column:6},end:{line:40,column:25}},"18":{start:{line:47,column:2},end:{line:77,column:5}},"19":{start:{line:48,column:4},end:{line:50,column:7}},"20":{start:{line:49,column:6},end:{line:49,column:62}},"21":{start:{line:51,column:4},end:{line:63,column:7}},"22":{start:{line:52,column:22},end:{line:56,column:7}},"23":{start:{line:58,column:6},end:{line:62,column:9}},"24":{start:{line:59,column:8},end:{line:59,column:41}},"25":{start:{line:60,column:8},end:{line:60,column:82}},"26":{start:{line:61,column:8},end:{line:61,column:15}},"27":{start:{line:64,column:4},end:{line:76,column:7}},"28":{start:{line:65,column:22},end:{line:69,column:7}},"29":{start:{line:71,column:6},end:{line:75,column:9}},"30":{start:{line:72,column:8},end:{line:72,column:41}},"31":{start:{line:73,column:8},end:{line:73,column:88}},"32":{start:{line:74,column:8},end:{line:74,column:15}},"33":{start:{line:82,column:2},end:{line:99,column:5}},"34":{start:{line:83,column:4},end:{line:85,column:7}},"35":{start:{line:84,column:6},end:{line:84,column:62}},"36":{start:{line:86,column:4},end:{line:92,column:7}},"37":{start:{line:87,column:6},end:{line:91,column:9}},"38":{start:{line:88,column:8},end:{line:88,column:41}},"39":{start:{line:89,column:8},end:{line:89,column:74}},"40":{start:{line:90,column:8},end:{line:90,column:15}},"41":{start:{line:93,column:4},end:{line:98,column:7}},"42":{start:{line:94,column:6},end:{line:97,column:9}},"43":{start:{line:95,column:8},end:{line:95,column:41}},"44":{start:{line:96,column:8},end:{line:96,column:15}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:17,column:9},end:{line:17,column:31}},loc:{start:{line:17,column:37},end:{line:17,column:95}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:39},end:{line:28,column:40}},loc:{start:{line:28,column:45},end:{line:100,column:1}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:29,column:9},end:{line:29,column:10}},loc:{start:{line:29,column:25},end:{line:42,column:3}},line:29},"3":{name:"(anonymous_3)",decl:{start:{line:36,column:12},end:{line:36,column:13}},loc:{start:{line:36,column:27},end:{line:39,column:5}},line:36},"4":{name:"(anonymous_4)",decl:{start:{line:39,column:13},end:{line:39,column:14}},loc:{start:{line:39,column:22},end:{line:41,column:5}},line:39},"5":{name:"(anonymous_5)",decl:{start:{line:47,column:33},end:{line:47,column:34}},loc:{start:{line:47,column:39},end:{line:77,column:3}},line:47},"6":{name:"(anonymous_6)",decl:{start:{line:48,column:11},end:{line:48,column:12}},loc:{start:{line:48,column:17},end:{line:50,column:5}},line:48},"7":{name:"(anonymous_7)",decl:{start:{line:51,column:24},end:{line:51,column:25}},loc:{start:{line:51,column:32},end:{line:63,column:5}},line:51},"8":{name:"(anonymous_8)",decl:{start:{line:58,column:84},end:{line:58,column:85}},loc:{start:{line:58,column:103},end:{line:62,column:7}},line:58},"9":{name:"(anonymous_9)",decl:{start:{line:64,column:75},end:{line:64,column:76}},loc:{start:{line:64,column:83},end:{line:76,column:5}},line:64},"10":{name:"(anonymous_10)",decl:{start:{line:71,column:84},end:{line:71,column:85}},loc:{start:{line:71,column:103},end:{line:75,column:7}},line:71},"11":{name:"(anonymous_11)",decl:{start:{line:82,column:32},end:{line:82,column:33}},loc:{start:{line:82,column:38},end:{line:99,column:3}},line:82},"12":{name:"(anonymous_12)",decl:{start:{line:83,column:10},end:{line:83,column:11}},loc:{start:{line:83,column:16},end:{line:85,column:5}},line:83},"13":{name:"(anonymous_13)",decl:{start:{line:86,column:27},end:{line:86,column:28}},loc:{start:{line:86,column:35},end:{line:92,column:5}},line:86},"14":{name:"(anonymous_14)",decl:{start:{line:87,column:69},end:{line:87,column:70}},loc:{start:{line:87,column:88},end:{line:91,column:7}},line:87},"15":{name:"(anonymous_15)",decl:{start:{line:93,column:36},end:{line:93,column:37}},loc:{start:{line:93,column:44},end:{line:98,column:5}},line:93},"16":{name:"(anonymous_16)",decl:{start:{line:94,column:68},end:{line:94,column:69}},loc:{start:{line:94,column:87},end:{line:97,column:7}},line:94}},branchMap:{"0":{loc:{start:{line:17,column:46},end:{line:17,column:92}},type:"cond-expr",locations:[{start:{line:17,column:70},end:{line:17,column:73}},{start:{line:17,column:76},end:{line:17,column:92}}],line:17},"1":{loc:{start:{line:17,column:46},end:{line:17,column:67}},type:"binary-expr",locations:[{start:{line:17,column:46},end:{line:17,column:49}},{start:{line:17,column:53},end:{line:17,column:67}}],line:17}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{"0":[0,0],"1":[0,0]},inputSourceMap:{version:3,sources:["contact_test.js"],names:["require","config","user","autToken","chai","should","use","chaiHttp","describe","before","done","dbURI","process","env","DB_USER","DB_PASSWORD","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","responseult","console","log","catch","error","connection","dropCollection","it","message","sender","name","request","server","post","send","end","err","response","have","status","body","property","eql","after","get"],mappings:"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",sourceRoot:"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/",sourcesContent:["import mongoose from 'mongoose';\nimport chai from 'chai';\nimport server from \"../index\";\nimport chaiHttp from \"chai-http\";\nimport {Post} from \"../models/Post\";\nrequire(\"dotenv\").config();\n\n\n//to mock a function during testing\nimport sinon from 'sinon'\nimport { User } from '../models/User';\n\nlet user, autToken;\n\n//assertion style\nchai.should();\n\nchai.use(chaiHttp)  \n    \n    \ndescribe('Test for Message Endpoints', ()=>{\n    before(function(done) {\n        // Connect to MongoDB database\n    const dbURI =`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`\n    mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true}).then((responseult)=>{\n\n            console.log('Db Connected!')\n\n            done();\n            \n        }).catch((error)=>{\n            console.log(error)\n        })\n\n\n    });     \n    \n\n    /**\n * POST Contact route\n */\n\ndescribe('POST /api/messages', ()=>{\n    before(()=>{\n        mongoose.connection.dropCollection('messages')\n    })\n\n    it('Send messages', (done)=>{\n        const message = {\n            sender: 'test@mail.com',\n            name:\"Eric gasana\",\n            message: \"I would like to thank you for those valuable posts\",\n    \n        }\n        chai.request(server)\n        .post(\"/api/messages\")\n        .send(message)\n        .end((err, response)=>{\n            response.should.have.status(201);\n            response.body.should.property('message').eql(\"Message Sent successfully\")\n        done();\n        })\n    })\n\n    it('dont send a message when sender, message content is not provided', (done)=>{\n        const message = {\n            sender: '',\n            name:\"sawa\",\n            message: \"\",\n    \n        }\n        chai.request(server)\n        .post(\"/api/messages\")\n        .send(message)\n        .end((err, response)=>{\n            response.should.have.status(403);\n            response.body.should.property('message').eql(\"sender and message are required\")\n        done();\n        })\n    \n    })\n})\n\n    /**\n     * GET Contact route\n     */\n\n describe('GET /api/messages', ()=>{\n    after(()=>{\n        mongoose.connection.dropCollection('messages')\n    })\n    it('get all messages', (done)=>{\n        chai.request(server)\n        .get(\"/api/messages\")\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.property('message').eql(\"contacts fetched!\")\n        done();\n        })\n    })\n\n    it('don\\'t return any message', (done)=>{\n        chai.request(server)\n        .get(\"/api/message\")\n        .end((err, response)=>{\n            response.should.have.status(404);\n        done();\n        })\n    })\n})\n\n\n})"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"42fe74754d5401b46dcb63dd44878141259e250a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1oltzlcx68=function(){return actualCoverage;};}return actualCoverage;}cov_1oltzlcx68();var _mongoose=(cov_1oltzlcx68().s[0]++,_interopRequireDefault(require("mongoose")));var _chai=(cov_1oltzlcx68().s[1]++,_interopRequireDefault(require("chai")));var _index=(cov_1oltzlcx68().s[2]++,_interopRequireDefault(require("../index")));var _chaiHttp=(cov_1oltzlcx68().s[3]++,_interopRequireDefault(require("chai-http")));var _Post=(cov_1oltzlcx68().s[4]++,require("../models/Post"));var _sinon=(cov_1oltzlcx68().s[5]++,_interopRequireDefault(require("sinon")));var _User=(cov_1oltzlcx68().s[6]++,require("../models/User"));function _interopRequireDefault(obj){cov_1oltzlcx68().f[0]++;cov_1oltzlcx68().s[7]++;return(cov_1oltzlcx68().b[1][0]++,obj)&&(cov_1oltzlcx68().b[1][1]++,obj.__esModule)?(cov_1oltzlcx68().b[0][0]++,obj):(cov_1oltzlcx68().b[0][1]++,{default:obj});}cov_1oltzlcx68().s[8]++;require("dotenv").config();//to mock a function during testing
let user,autToken;//assertion style
cov_1oltzlcx68().s[9]++;_chai.default.should();cov_1oltzlcx68().s[10]++;_chai.default.use(_chaiHttp.default);cov_1oltzlcx68().s[11]++;describe('Test for Message Endpoints',()=>{cov_1oltzlcx68().f[1]++;cov_1oltzlcx68().s[12]++;before(function(done){cov_1oltzlcx68().f[2]++;// Connect to MongoDB database
const dbURI=(cov_1oltzlcx68().s[13]++,`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`);cov_1oltzlcx68().s[14]++;_mongoose.default.connect(dbURI,{useNewUrlParser:true,useUnifiedTopology:true}).then(responseult=>{cov_1oltzlcx68().f[3]++;cov_1oltzlcx68().s[15]++;console.log('Db Connected!');cov_1oltzlcx68().s[16]++;done();}).catch(error=>{cov_1oltzlcx68().f[4]++;cov_1oltzlcx68().s[17]++;console.log(error);});});/**
  * POST Contact route
  */cov_1oltzlcx68().s[18]++;describe('POST /api/messages',()=>{cov_1oltzlcx68().f[5]++;cov_1oltzlcx68().s[19]++;before(()=>{cov_1oltzlcx68().f[6]++;cov_1oltzlcx68().s[20]++;_mongoose.default.connection.dropCollection('messages');});cov_1oltzlcx68().s[21]++;it('Send messages',done=>{cov_1oltzlcx68().f[7]++;const message=(cov_1oltzlcx68().s[22]++,{sender:'test@mail.com',name:"Eric gasana",message:"I would like to thank you for those valuable posts"});cov_1oltzlcx68().s[23]++;_chai.default.request(_index.default).post("/api/messages").send(message).end((err,response)=>{cov_1oltzlcx68().f[8]++;cov_1oltzlcx68().s[24]++;response.should.have.status(201);cov_1oltzlcx68().s[25]++;response.body.should.property('message').eql("Message Sent successfully");cov_1oltzlcx68().s[26]++;done();});});cov_1oltzlcx68().s[27]++;it('dont send a message when sender, message content is not provided',done=>{cov_1oltzlcx68().f[9]++;const message=(cov_1oltzlcx68().s[28]++,{sender:'',name:"sawa",message:""});cov_1oltzlcx68().s[29]++;_chai.default.request(_index.default).post("/api/messages").send(message).end((err,response)=>{cov_1oltzlcx68().f[10]++;cov_1oltzlcx68().s[30]++;response.should.have.status(403);cov_1oltzlcx68().s[31]++;response.body.should.property('message').eql("sender and message are required");cov_1oltzlcx68().s[32]++;done();});});});/**
   * GET Contact route
   */cov_1oltzlcx68().s[33]++;describe('GET /api/messages',()=>{cov_1oltzlcx68().f[11]++;cov_1oltzlcx68().s[34]++;after(()=>{cov_1oltzlcx68().f[12]++;cov_1oltzlcx68().s[35]++;_mongoose.default.connection.dropCollection('messages');});cov_1oltzlcx68().s[36]++;it('get all messages',done=>{cov_1oltzlcx68().f[13]++;cov_1oltzlcx68().s[37]++;_chai.default.request(_index.default).get("/api/messages").end((err,response)=>{cov_1oltzlcx68().f[14]++;cov_1oltzlcx68().s[38]++;response.should.have.status(200);cov_1oltzlcx68().s[39]++;response.body.should.property('message').eql("contacts fetched!");cov_1oltzlcx68().s[40]++;done();});});cov_1oltzlcx68().s[41]++;it('don\'t return any message',done=>{cov_1oltzlcx68().f[15]++;cov_1oltzlcx68().s[42]++;_chai.default.request(_index.default).get("/api/message").end((err,response)=>{cov_1oltzlcx68().f[16]++;cov_1oltzlcx68().s[43]++;response.should.have.status(404);cov_1oltzlcx68().s[44]++;done();});});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,