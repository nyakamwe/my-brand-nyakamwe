{"version":3,"sources":["contact_test.js"],"names":["require","config","user","autToken","chai","should","use","chaiHttp","describe","before","done","dbURI","process","env","DB_USER","DB_PASSWORD","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","responseult","console","log","catch","error","connection","dropCollection","it","message","sender","name","request","server","post","send","end","err","response","have","status","body","property","eql","after","get"],"mappings":"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","sourceRoot":"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/","sourcesContent":["import mongoose from 'mongoose';\nimport chai from 'chai';\nimport server from \"../index\";\nimport chaiHttp from \"chai-http\";\nimport {Post} from \"../models/Post\";\nrequire(\"dotenv\").config();\n\n\n//to mock a function during testing\nimport sinon from 'sinon'\nimport { User } from '../models/User';\n\nlet user, autToken;\n\n//assertion style\nchai.should();\n\nchai.use(chaiHttp)  \n    \n    \ndescribe('Test for Message Endpoints', ()=>{\n    before(function(done) {\n        // Connect to MongoDB database\n    const dbURI =`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`\n    mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true}).then((responseult)=>{\n\n            console.log('Db Connected!')\n\n            done();\n            \n        }).catch((error)=>{\n            console.log(error)\n        })\n\n\n    });     \n    \n\n    /**\n * POST Contact route\n */\n\ndescribe('POST /api/messages', ()=>{\n    before(()=>{\n        mongoose.connection.dropCollection('messages')\n    })\n\n    it('Send messages', (done)=>{\n        const message = {\n            sender: 'test@mail.com',\n            name:\"Eric gasana\",\n            message: \"I would like to thank you for those valuable posts\",\n    \n        }\n        chai.request(server)\n        .post(\"/api/messages\")\n        .send(message)\n        .end((err, response)=>{\n            response.should.have.status(201);\n            response.body.should.property('message').eql(\"Message Sent successfully\")\n        done();\n        })\n    })\n\n    it('dont send a message when sender, message content is not provided', (done)=>{\n        const message = {\n            sender: '',\n            name:\"sawa\",\n            message: \"\",\n    \n        }\n        chai.request(server)\n        .post(\"/api/messages\")\n        .send(message)\n        .end((err, response)=>{\n            response.should.have.status(403);\n            response.body.should.property('message').eql(\"sender and message are required\")\n        done();\n        })\n    \n    })\n})\n\n    /**\n     * GET Contact route\n     */\n\n describe('GET /api/messages', ()=>{\n    after(()=>{\n        mongoose.connection.dropCollection('messages')\n    })\n    it('get all messages', (done)=>{\n        chai.request(server)\n        .get(\"/api/messages\")\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.property('message').eql(\"contacts fetched!\")\n        done();\n        })\n    })\n\n    it('don\\'t return any message', (done)=>{\n        chai.request(server)\n        .get(\"/api/message\")\n        .end((err, response)=>{\n            response.should.have.status(404);\n        done();\n        })\n    })\n})\n\n\n})"]}