{"version":3,"sources":["userControllers.js"],"names":["users_get_all","req","res","users","User","find","then","result","status","json","data","user_create","body","username","email","password","message","salt","bcrypt","genSalt","hashedPassword","hash","isNewUser","isThisEmailInUSe","user","save","error","user_get_token","findOne","match","passwordComparison","accesToken","jwt","sign","process","env","ACCESS_TOKEN_SECRET","expiresIn","Token"],"mappings":"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","sourceRoot":"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/controllers/","sourcesContent":["// import models\nimport {User} from '../models/User'\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\n\n//listing all users\nconst users_get_all= (req, res)=>{\n\t\n\tconst users = User.find().then((result)=>{\n\t\treturn res.status(200).json({data:result})\n\t})\n}\n\n// creating a new user\nconst user_create = async (req, res)=>{\n\ttry {\n\t\tif(req.body.username === '' || req.body.email === '' || req.body.password === ''){\n\t\t\treturn res.status(403).json({message:\"All fields are required\"})\n\t\t}\n\n\t\tconst salt = await bcrypt.genSalt()\n\t\tconst hashedPassword = await bcrypt.hash(req.body.password, salt)\n\n\t\tconst isNewUser = await User.isThisEmailInUSe(req.body.email);\n\t\tif(!isNewUser) return res.status(403).json({message:\"user already exists\"});\n\n\t\tconst user = await new User({\n\t\t\tusername:req.body.username,\n\t\t\temail:req.body.email,\n\t\t\tpassword:hashedPassword\n\t\t})\n\t\n\t\tawait user.save()\n\t\n\t\treturn res.status(201).json({message:\"user created!\"})\n\t\t\n\t} catch (error) {\n\t\treturn res.status(500).json({error:error.message})\n\t}\n\n\t\n}\n\n//login user\nconst user_get_token= async (req, res)=>{\n\ttry {\n\t\tconst user = await User.findOne({ username: req.body.username });\n\n\t\tif (user) {\n\t\t  const match = await user.passwordComparison(req.body.password, user.password);\n\t\t  if (match) {\n\t\t\t//further code to maintain jwt authentication\n\t\t\t\n\t\t\tconst user = {\n\t\t\t\tusername : req.body.username\n\t\t\t\t\n\t\t\t}\n\t\t\tconst accesToken = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, {expiresIn: '30m'});\n\t\t\t\n\t\t\treturn res.status(200).json({Token:accesToken});\n\t\t  } else {\n\t\t\tres.status(403).json({message:\"Invalid username or password.\"});\n\t\t  }\n\n\t\t} else {\n\t\t  res.status(400).json({message:\"Not User.\"});\n\t\t}\n        \n\t  } catch (error) {\n\t\t\n\t\tres.status(500).json({message:\"Internal Server error occured\"});\n\t  }\n\n}\n\nexport {users_get_all, user_create, user_get_token}\n\n"]}