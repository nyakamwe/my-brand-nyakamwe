{"version":3,"sources":["blog_test.js"],"names":["require","config","user","autToken","chai","should","use","chaiHttp","describe","before","done","dbURI","process","env","DB_USER","DB_PASSWORD","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","responseult","console","log","catch","error","it","request","server","get","end","err","response","have","status","body","message","be","eq","responseponse","postId","a","newUser","User","username","email","password","post","send","property","eql","logInUser","Token","userToken","Post","title","content","set","patch","delete","sender","name","commentId","newComment","description"],"mappings":"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","sourceRoot":"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/","sourcesContent":["import mongoose from 'mongoose';\nimport chai from 'chai';\nimport server from \"../index\";\nimport chaiHttp from \"chai-http\";\nimport {Post} from \"../models/Post\";\nrequire(\"dotenv\").config();\nimport * as AuthMiddleWare from \"../AuthMiddleWare/AuthenticateToken\";\n\n\n//to mock a function during testing\nimport sinon from 'sinon'\nimport { User } from '../models/User';\n\nlet user, autToken;\n\n//assertion style\nchai.should();\n\nchai.use(chaiHttp)\n\ndescribe(\"Test CRUD of Blog\", ()=>{\n    before(function(done) {\n        // Connect to MongoDB database\n    const dbURI =`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`\n    mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true}).then((responseult)=>{\n\n            console.log('Db Connected!')\n\n            done();\n            \n        }).catch((error)=>{\n            console.log(error)\n        })\n\n    });\n\n    \n\n\n    \n   \n    /**\n     * test GET posts route\n     */\n\n    describe(\"GET /api/posts\", ()=>{\n        \n        it(\"returns all posts\", (done)=>{\n            chai.request(server)\n            .get(\"/api/posts\")\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.message.should.be.eq(\"Fetched successfully\")\n            done();\n            })\n            \n        })\n\n        it(\"not returns all posts\", (done)=>{\n            chai.request(server)\n            .get(\"/api/post\")\n            .end((err, responseponse)=>{\n                responseponse.should.have.status(404);\n\n            done();\n            })\n            \n        })\n\n        \n    });\n\n    /**\n     * test GET(by id) post route\n     */\n\n    describe(\"GET /api/posts/:id\", ()=>{\n        \n        it(\"returns a single post\", (done)=>{\n            const postId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .get(`/api/posts/${postId}`)\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.should.be.a('object');\n                response.body.message.should.be.eq(\"successfully fetched\")\n                \n            done();\n            })\n            \n        });\n\n        \n        it(\"not returns a single post at this id\", (done)=>{\n            const postId = \"625943e64e9dd47y77f9be96\"\n            chai.request(server)\n            .get(`/api/posts/${postId}`)\n            .end((err, responseponse)=>{\n                responseponse.should.have.status(404);\n                responseponse.body.error.should.be.eq(\"Post does not exist!\")\n                \n            done();\n            })\n            \n        })\n    })\n\n\n    /**\n     * Test create new user\n     */\n\n    describe('POST /api/users', ()=>{\n\n        it('creates new user ', (done)=>{\n\n            const newUser = new User({\n                username:\"testing manase2\",\n                email:\"manase3@mail.com\",\n                password:\"password test\"\n           \n            })\n\n            chai.request(server)\n            .post(\"/api/users\")\n            .send(newUser)\n            .end((err, response)=>{\n                response.should.have.status(201);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"user created!\");\n            done();   \n            })\n        })\n\n\n        it('User exists', (done)=>{\n\n            user = new User({\n                username:\"myuser\",\n                email:\"myuser@mail.com\",\n                password:\"password test\"\n           \n            })\n\n            chai.request(server)\n            .post(\"/api/users\")\n            .send(user)\n            .end((err, response)=>{\n                response.should.have.status(403);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"user already exists\");\n            done();   \n            })\n\n        })\n\n        it('new user with no username, email or password ', (done)=>{\n\n            const user = new User({\n                username:\"\",\n                email:\"\",\n                password:\"\"\n           \n            })\n\n            chai.request(server)\n            .post(\"/api/users\")\n            .send(user)\n            .end((err, response)=>{\n                response.should.have.status(403);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"All fields are required\");\n            done();   \n            })\n        })\n\n    })\n\n    /**\n     * POST User login\n     */\n\n    describe('POST /api/users/login', ()=>{\n       \n        const logInUser = {\n            username:'keza',\n            password:'kayi'\n        }\n\n        it('login a user', (done)=>{\n            chai.request(server)\n            .post('/api/users/login')\n            .send({username:logInUser.username, password:logInUser.password})\n            .end(function(err, response) {\n                if (err) return done(err);\n\n                response.should.have.status(200);\n                response.body.should.be.a('object');\n                autToken = response.body.Token\n                \n                done();\n            });\n\n        })\n\n        it('not login a user with incorrect credentials', (done)=>{\n            const logInUser = {\n                username:'keza',\n                password:'password'\n            }\n            chai.request(server)\n            .post('/api/users/login')\n            .send({username:logInUser.username, password:logInUser.password})\n            .end(function(err, response) {\n                if (err) return done(err);\n\n                response.should.have.status(403);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"Invalid username or password.\");\n            done();   \n            });\n\n        })\n\n        it('not login anonymous user', (done)=>{\n            const logInUser = {\n                username:'hereweare',\n                password:'hereweare'\n            }\n            chai.request(server)\n            .post('/api/users/login')\n            .send({username:logInUser.username, password:logInUser.password})\n            .end(function(err, response) {\n                if (err) return done(err);\n\n                response.should.have.status(400);\n                response.body.should.have.property('message').eql(\"Not User.\");\n            done();   \n            });\n\n        })\n\n\n       \n    })\n\n    /**\n     * POST a post route\n     */\n\n    describe(\"POST /api/posts\", ()=>{\n\n        it(\"creates a new post\", (done)=>{\n            const userToken = 'Bearer ' + autToken\n\n            const post = new Post({\n                title: \"unit testing\",\n                content: \"I am testing nodejs api using mocha with chai assertion library\"\n                \n            })\n            // post.save()\n            \n            chai.request(server)\n            .post(\"/api/posts\")\n        \n            //set the auth header with our token\n            .set('Authorization', 'Bearer ' + autToken)\n            .send(post)\n            .end(function(error, response) {\n                response.should.have.status(201);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"Post Saved successfully\");\n            done();  \n            });\n        })\n            \n\n        const userToken = 'Bearer ' + autToken\n\n        it(\"fails to create a post due to unathorized user\", (done)=>{\n\n            const post = new Post({\n                title: \"keza testing \",\n                content: \"unit testing with mocha and user keza\"\n                \n            })\n            // post.save()\n            \n            chai.request(server)\n            .post(\"/api/posts\")\n            .send(post)\n            //set the auth header with our token\n            .set('Authorization', userToken)\n            .end(function(error, response) {\n                response.should.have.status(403);\n                response.body.should.have.property('message').eql(\"Invalid token\");\n            done();  \n            });\n           \n            \n        }) \n\n        it(\"do not create a post without title and content\", (done)=>{\n\n            const post = new Post({\n                title: \"\",\n                content: \"\"\n                \n            })\n            // post.save()\n            \n            chai.request(server)\n            .post(\"/api/posts\")\n        \n            //set the auth header with our token\n            .set('Authorization', 'Bearer ' + autToken)\n            .send(post)\n            .end(function(error, response) {\n                response.should.have.status(400);\n                response.body.should.have.property('message').eql(\"Title and content are required\")\n            done();  \n            });\n        })\n\n            \n    }) \n    \n    \n    /**\n     * PUT a post route\n     */\n\n    describe('PUT /api/posts/:id', ()=>{\n        it('updates a post', (done)=>{\n            const postId = \"625af4e9872ff42d49f47dcd\"\n            const post = {\n                title: \"unit testing\",\n                content: \"mocha Js framework for testing\",\n                \n            }\n            chai.request(server)\n            .patch(`/api/posts/${postId}`)\n            .send(post)\n            .set('Authorization', 'Bearer ' + autToken)\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"Post successfully updated!\")\n                \n            done();\n            })\n        })\n\n        it('don\\'t updates a post when title or content is empty', (done)=>{\n            const postId = \"625af4e9872ff42d49f47dcd\"\n            const post = {\n                title: \"avicii\",\n                content: \"\",\n                \n            }\n            chai.request(server)\n            .patch(`/api/posts/${postId}`)\n            .send(post)\n            .set('Authorization', 'Bearer ' + autToken)\n            .end((err, response)=>{\n                response.should.have.status(400);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"Title and content need value!\")\n                \n            done();\n            })\n        })\n\n\n    })\n\n    /**\n     * DELETE post route\n     */\n\n     describe('DELETE /api/posts/:id', ()=>{\n        it('It deletes a post', (done)=>{\n            const postId = \"625b07c93cc2f2b0163f1a75\"\n            chai.request(server)\n            .delete(`/api/posts/${postId}`)\n            .set('Authorization', 'Bearer ' + autToken)\n            .end((err, response)=>{\n                response.should.have.status(200);\n\n            done();\n            })\n        })\n\n        it('It should not delete post that doesn\\'t exist in DB', (done)=>{\n            const postId = \"625b07c93cc2f2b0163f1a75\"\n            chai.request(server)\n            .delete(`/api/posts/${postId}`)\n            .set('Authorization', 'Bearer ' + autToken)\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.have.property('error').eql(\"Post doesn't exist!\")\n            done();\n            })\n        })\n\n        \n\n    })\n\n    /**\n     * GET Contact route\n     */\n\n    describe('GET /api/messages', ()=>{\n        it('get all messages', (done)=>{\n            chai.request(server)\n            .get(\"/api/messages\")\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.should.property('message').eql(\"contacts fetched!\")\n            done();\n            })\n        })\n\n        it('don\\'t return any message', (done)=>{\n            chai.request(server)\n            .get(\"/api/message\")\n            .end((err, response)=>{\n                response.should.have.status(404);\n            done();\n            })\n        })\n    })\n\n    /**\n     * POST Contact route\n     */\n\n    describe('POST /api/messages', ()=>{\n        it('Send messages', (done)=>{\n            const message = {\n                sender: 'test@mail.com',\n                name:\"Eric gasana\",\n                message: \"I would like to thank you for those valuable posts\",\n        \n            }\n            chai.request(server)\n            .post(\"/api/messages\")\n            .send(message)\n            .end((err, response)=>{\n                response.should.have.status(201);\n                response.body.should.property('message').eql(\"Message Sent successfully\")\n            done();\n            })\n        })\n\n        it('dont send a message when sender, message content is not provided', (done)=>{\n            const message = {\n                sender: '',\n                name:\"sawa\",\n                message: \"\",\n        \n            }\n            chai.request(server)\n            .post(\"/api/messages\")\n            .send(message)\n            .end((err, response)=>{\n                response.should.have.status(403);\n                response.body.should.property('message').eql(\"sender and message are required\")\n            done();\n            })\n        \n        })\n    })\n\n    /**\n     * GET comment route\n    */\n\n    describe('GET /api/posts/:id/comment', ()=>{\n        it('shows all comments related to specific post', (done)=>{\n            const postId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .get(`/api/posts/${postId}/comment`)\n            .send({postId})\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.should.have.a('object')\n            done();\n            })\n        })\n        it('show error when that post in not in DB', (done)=>{\n            const postId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .get(`/api/posts/${postId}/comment`)\n            .send({postId})\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.have.property('message').eql(\"post not found\")\n            done();\n            })\n        })\n\n        it('when post have no comment', (done)=>{\n            const postId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .get(`/api/posts/${postId}/comment`)\n            .send({postId})\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.have.property('comment').eql(\"no comments related to this post\")\n            done();\n            })\n        })\n\n        \n        it('shows individual comment', (done)=>{\n            const commentId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .get(`/api/comments/${commentId}`)\n            .send({commentId})\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.should.be.a('object')\n                response.body.should.have.property('comment')\n            done();\n            })\n        })\n\n        it('shows error for non existing comment', (done)=>{\n            const commentId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .get(`/api/comments/${commentId}`)\n            .send({commentId})\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.be.a('object')\n                response.body.should.have.property('comment').eql(\"Comment Doesn't Exists\")\n            done();\n            })\n        })\n\n        \n        \n    })\n\n\n    /**\n    * POST comment route\n    */\n\n    describe('POST /api/posts/:id/comment', ()=>{\n        it('comment on a post', (done)=>{\n            const postId = \"625943e64e9dd47477f9be96\"\n            const newComment ={\n                postId,\n                description:\"testing a comment\"\n            };\n\n            chai.request(server)\n            .post(`/api/posts/${postId}/comment`)\n            .send(newComment)\n            .set('Authorization', 'Bearer ' + autToken )\n            .end((err, response)=>{\n                response.should.have.status(201);\n                response.body.should.be.a('object');\n                response.body.should.have.property('comment')\n            done();\n            })\n        })\n\n\n        it('handles when you want to comment on non existing comment', (done)=>{\n            const postId = \"625943e64e9dd47477f9be96\"\n            const newComment ={\n                postId,\n                description:\"testing a comment\"\n            };\n            chai.request(server)\n            .post(`/api/posts/${postId}/comment`)\n            .send(newComment)\n            .set('Authorization', 'Bearer ' + autToken )\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.be.a('object');\n                response.body.should.have.property('message').eql(\"Post not available\");\n            done();\n            })\n        })\n\n    })\n\n\n    /**\n     * DELETE comment route\n     */\n\n    describe('DELETE /api/comments/:id', ()=>{\n        it('deletes comment on a post', (done)=>{\n            const commentId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .delete(`/api/comments/${commentId}`)\n            .set('Authorization', 'Bearer ' + autToken )\n            .end((err, response)=>{\n                response.should.have.status(200);\n                \n            done();\n            })\n        })\n\n        it('handles when you want to delete non existing comment', (done)=>{\n            const commentId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .delete(`/api/comments/${commentId}`)\n            .set('Authorization', 'Bearer ' + autToken )\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.have.property('message').eql(\"Comment doesn't exist\")\n            done();\n            })\n        })\n\n    })\n\n\n\n})\n\n\n"]}