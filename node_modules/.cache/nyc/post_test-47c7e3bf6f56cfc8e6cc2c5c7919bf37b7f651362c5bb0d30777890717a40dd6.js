"use strict";function cov_2cxxeu1fey(){var path="/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/post_test.js";var hash="850f28e225f32975189c634ddcd383df60a4d1db";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/post_test.js",statementMap:{"0":{start:{line:3,column:16},end:{line:3,column:59}},"1":{start:{line:5,column:12},end:{line:5,column:51}},"2":{start:{line:7,column:13},end:{line:7,column:56}},"3":{start:{line:9,column:16},end:{line:9,column:60}},"4":{start:{line:11,column:12},end:{line:11,column:37}},"5":{start:{line:13,column:13},end:{line:13,column:53}},"6":{start:{line:15,column:12},end:{line:15,column:37}},"7":{start:{line:17,column:39},end:{line:17,column:93}},"8":{start:{line:19,column:0},end:{line:19,column:27}},"9":{start:{line:24,column:0},end:{line:24,column:23}},"10":{start:{line:26,column:0},end:{line:26,column:37}},"11":{start:{line:28,column:0},end:{line:236,column:3}},"12":{start:{line:29,column:2},end:{line:42,column:5}},"13":{start:{line:31,column:18},end:{line:31,column:161}},"14":{start:{line:33,column:4},end:{line:41,column:7}},"15":{start:{line:37,column:6},end:{line:37,column:35}},"16":{start:{line:38,column:6},end:{line:38,column:13}},"17":{start:{line:40,column:6},end:{line:40,column:25}},"18":{start:{line:47,column:2},end:{line:129,column:5}},"19":{start:{line:48,column:4},end:{line:52,column:7}},"20":{start:{line:49,column:6},end:{line:49,column:59}},"21":{start:{line:51,column:6},end:{line:51,column:59}},"22":{start:{line:54,column:4},end:{line:67,column:7}},"23":{start:{line:55,column:22},end:{line:59,column:8}},"24":{start:{line:61,column:6},end:{line:66,column:9}},"25":{start:{line:62,column:8},end:{line:62,column:41}},"26":{start:{line:63,column:8},end:{line:63,column:44}},"27":{start:{line:64,column:8},end:{line:64,column:75}},"28":{start:{line:65,column:8},end:{line:65,column:15}},"29":{start:{line:69,column:22},end:{line:72,column:5}},"30":{start:{line:73,column:4},end:{line:84,column:7}},"31":{start:{line:74,column:6},end:{line:83,column:9}},"32":{start:{line:78,column:8},end:{line:78,column:34}},"33":{start:{line:78,column:17},end:{line:78,column:34}},"34":{start:{line:79,column:8},end:{line:79,column:41}},"35":{start:{line:80,column:8},end:{line:80,column:44}},"36":{start:{line:81,column:8},end:{line:81,column:39}},"37":{start:{line:82,column:8},end:{line:82,column:15}},"38":{start:{line:85,column:4},end:{line:101,column:7}},"39":{start:{line:86,column:24},end:{line:86,column:44}},"40":{start:{line:87,column:19},end:{line:90,column:8}},"41":{start:{line:91,column:6},end:{line:91,column:18}},"42":{start:{line:93,column:6},end:{line:100,column:9}},"43":{start:{line:95,column:8},end:{line:95,column:41}},"44":{start:{line:96,column:8},end:{line:96,column:44}},"45":{start:{line:97,column:8},end:{line:97,column:85}},"46":{start:{line:98,column:8},end:{line:98,column:21}},"47":{start:{line:99,column:8},end:{line:99,column:15}},"48":{start:{line:102,column:22},end:{line:102,column:42}},"49":{start:{line:103,column:4},end:{line:115,column:7}},"50":{start:{line:104,column:19},end:{line:107,column:8}},"51":{start:{line:109,column:6},end:{line:114,column:9}},"52":{start:{line:111,column:8},end:{line:111,column:41}},"53":{start:{line:112,column:8},end:{line:112,column:75}},"54":{start:{line:113,column:8},end:{line:113,column:15}},"55":{start:{line:116,column:4},end:{line:128,column:7}},"56":{start:{line:117,column:19},end:{line:120,column:8}},"57":{start:{line:122,column:6},end:{line:127,column:9}},"58":{start:{line:124,column:8},end:{line:124,column:41}},"59":{start:{line:125,column:8},end:{line:125,column:92}},"60":{start:{line:126,column:8},end:{line:126,column:15}},"61":{start:{line:134,column:2},end:{line:148,column:5}},"62":{start:{line:135,column:4},end:{line:141,column:7}},"63":{start:{line:136,column:6},end:{line:140,column:9}},"64":{start:{line:137,column:8},end:{line:137,column:41}},"65":{start:{line:138,column:8},end:{line:138,column:67}},"66":{start:{line:139,column:8},end:{line:139,column:15}},"67":{start:{line:142,column:4},end:{line:147,column:7}},"68":{start:{line:143,column:6},end:{line:146,column:9}},"69":{start:{line:144,column:8},end:{line:144,column:41}},"70":{start:{line:145,column:8},end:{line:145,column:15}},"71":{start:{line:153,column:2},end:{line:173,column:5}},"72":{start:{line:154,column:4},end:{line:163,column:7}},"73":{start:{line:155,column:21},end:{line:155,column:23}},"74":{start:{line:157,column:6},end:{line:162,column:9}},"75":{start:{line:158,column:8},end:{line:158,column:41}},"76":{start:{line:159,column:8},end:{line:159,column:44}},"77":{start:{line:160,column:8},end:{line:160,column:67}},"78":{start:{line:161,column:8},end:{line:161,column:15}},"79":{start:{line:164,column:4},end:{line:172,column:7}},"80":{start:{line:165,column:21},end:{line:165,column:25}},"81":{start:{line:167,column:6},end:{line:171,column:9}},"82":{start:{line:168,column:8},end:{line:168,column:46}},"83":{start:{line:169,column:8},end:{line:169,column:70}},"84":{start:{line:170,column:8},end:{line:170,column:15}},"85":{start:{line:178,column:2},end:{line:207,column:5}},"86":{start:{line:179,column:4},end:{line:192,column:7}},"87":{start:{line:180,column:21},end:{line:180,column:23}},"88":{start:{line:181,column:19},end:{line:184,column:7}},"89":{start:{line:186,column:6},end:{line:191,column:9}},"90":{start:{line:187,column:8},end:{line:187,column:41}},"91":{start:{line:188,column:8},end:{line:188,column:44}},"92":{start:{line:189,column:8},end:{line:189,column:88}},"93":{start:{line:190,column:8},end:{line:190,column:15}},"94":{start:{line:193,column:4},end:{line:206,column:7}},"95":{start:{line:194,column:21},end:{line:194,column:23}},"96":{start:{line:195,column:19},end:{line:198,column:7}},"97":{start:{line:200,column:6},end:{line:205,column:9}},"98":{start:{line:201,column:8},end:{line:201,column:41}},"99":{start:{line:202,column:8},end:{line:202,column:44}},"100":{start:{line:203,column:8},end:{line:203,column:91}},"101":{start:{line:204,column:8},end:{line:204,column:15}},"102":{start:{line:212,column:2},end:{line:235,column:5}},"103":{start:{line:213,column:4},end:{line:217,column:7}},"104":{start:{line:214,column:6},end:{line:214,column:59}},"105":{start:{line:216,column:6},end:{line:216,column:59}},"106":{start:{line:218,column:4},end:{line:225,column:7}},"107":{start:{line:219,column:21},end:{line:219,column:23}},"108":{start:{line:221,column:6},end:{line:224,column:9}},"109":{start:{line:222,column:8},end:{line:222,column:41}},"110":{start:{line:223,column:8},end:{line:223,column:15}},"111":{start:{line:226,column:4},end:{line:234,column:7}},"112":{start:{line:227,column:21},end:{line:227,column:23}},"113":{start:{line:229,column:6},end:{line:233,column:9}},"114":{start:{line:230,column:8},end:{line:230,column:41}},"115":{start:{line:231,column:8},end:{line:231,column:79}},"116":{start:{line:232,column:8},end:{line:232,column:15}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:17,column:9},end:{line:17,column:31}},loc:{start:{line:17,column:37},end:{line:17,column:95}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:36},end:{line:28,column:37}},loc:{start:{line:28,column:42},end:{line:236,column:1}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:29,column:9},end:{line:29,column:10}},loc:{start:{line:29,column:25},end:{line:42,column:3}},line:29},"3":{name:"(anonymous_3)",decl:{start:{line:36,column:12},end:{line:36,column:13}},loc:{start:{line:36,column:27},end:{line:39,column:5}},line:36},"4":{name:"(anonymous_4)",decl:{start:{line:39,column:13},end:{line:39,column:14}},loc:{start:{line:39,column:22},end:{line:41,column:5}},line:39},"5":{name:"(anonymous_5)",decl:{start:{line:47,column:30},end:{line:47,column:31}},loc:{start:{line:47,column:36},end:{line:129,column:3}},line:47},"6":{name:"(anonymous_6)",decl:{start:{line:48,column:11},end:{line:48,column:12}},loc:{start:{line:48,column:17},end:{line:52,column:5}},line:48},"7":{name:"(anonymous_7)",decl:{start:{line:54,column:28},end:{line:54,column:29}},loc:{start:{line:54,column:36},end:{line:67,column:5}},line:54},"8":{name:"(anonymous_8)",decl:{start:{line:61,column:81},end:{line:61,column:82}},loc:{start:{line:61,column:100},end:{line:66,column:7}},line:61},"9":{name:"(anonymous_9)",decl:{start:{line:73,column:23},end:{line:73,column:24}},loc:{start:{line:73,column:31},end:{line:84,column:5}},line:73},"10":{name:"(anonymous_10)",decl:{start:{line:77,column:13},end:{line:77,column:14}},loc:{start:{line:77,column:38},end:{line:83,column:7}},line:77},"11":{name:"(anonymous_11)",decl:{start:{line:85,column:29},end:{line:85,column:30}},loc:{start:{line:85,column:37},end:{line:101,column:5}},line:85},"12":{name:"(anonymous_12)",decl:{start:{line:94,column:65},end:{line:94,column:66}},loc:{start:{line:94,column:92},end:{line:100,column:7}},line:94},"13":{name:"(anonymous_13)",decl:{start:{line:103,column:57},end:{line:103,column:58}},loc:{start:{line:103,column:65},end:{line:115,column:5}},line:103},"14":{name:"(anonymous_14)",decl:{start:{line:110,column:43},end:{line:110,column:44}},loc:{start:{line:110,column:70},end:{line:114,column:7}},line:110},"15":{name:"(anonymous_15)",decl:{start:{line:116,column:57},end:{line:116,column:58}},loc:{start:{line:116,column:65},end:{line:128,column:5}},line:116},"16":{name:"(anonymous_16)",decl:{start:{line:123,column:65},end:{line:123,column:66}},loc:{start:{line:123,column:92},end:{line:127,column:7}},line:123},"17":{name:"(anonymous_17)",decl:{start:{line:134,column:29},end:{line:134,column:30}},loc:{start:{line:134,column:35},end:{line:148,column:3}},line:134},"18":{name:"(anonymous_18)",decl:{start:{line:135,column:28},end:{line:135,column:29}},loc:{start:{line:135,column:36},end:{line:141,column:5}},line:135},"19":{name:"(anonymous_19)",decl:{start:{line:136,column:66},end:{line:136,column:67}},loc:{start:{line:136,column:85},end:{line:140,column:7}},line:136},"20":{name:"(anonymous_20)",decl:{start:{line:142,column:32},end:{line:142,column:33}},loc:{start:{line:142,column:40},end:{line:147,column:5}},line:142},"21":{name:"(anonymous_21)",decl:{start:{line:143,column:65},end:{line:143,column:66}},loc:{start:{line:143,column:84},end:{line:146,column:7}},line:143},"22":{name:"(anonymous_22)",decl:{start:{line:153,column:33},end:{line:153,column:34}},loc:{start:{line:153,column:39},end:{line:173,column:3}},line:153},"23":{name:"(anonymous_23)",decl:{start:{line:154,column:32},end:{line:154,column:33}},loc:{start:{line:154,column:40},end:{line:163,column:5}},line:154},"24":{name:"(anonymous_24)",decl:{start:{line:157,column:76},end:{line:157,column:77}},loc:{start:{line:157,column:95},end:{line:162,column:7}},line:157},"25":{name:"(anonymous_25)",decl:{start:{line:164,column:47},end:{line:164,column:48}},loc:{start:{line:164,column:55},end:{line:172,column:5}},line:164},"26":{name:"(anonymous_26)",decl:{start:{line:167,column:76},end:{line:167,column:77}},loc:{start:{line:167,column:100},end:{line:171,column:7}},line:167},"27":{name:"(anonymous_27)",decl:{start:{line:178,column:33},end:{line:178,column:34}},loc:{start:{line:178,column:39},end:{line:207,column:3}},line:178},"28":{name:"(anonymous_28)",decl:{start:{line:179,column:25},end:{line:179,column:26}},loc:{start:{line:179,column:33},end:{line:192,column:5}},line:179},"29":{name:"(anonymous_29)",decl:{start:{line:186,column:132},end:{line:186,column:133}},loc:{start:{line:186,column:151},end:{line:191,column:7}},line:186},"30":{name:"(anonymous_30)",decl:{start:{line:193,column:63},end:{line:193,column:64}},loc:{start:{line:193,column:71},end:{line:206,column:5}},line:193},"31":{name:"(anonymous_31)",decl:{start:{line:200,column:132},end:{line:200,column:133}},loc:{start:{line:200,column:151},end:{line:205,column:7}},line:200},"32":{name:"(anonymous_32)",decl:{start:{line:212,column:36},end:{line:212,column:37}},loc:{start:{line:212,column:42},end:{line:235,column:3}},line:212},"33":{name:"(anonymous_33)",decl:{start:{line:213,column:10},end:{line:213,column:11}},loc:{start:{line:213,column:16},end:{line:217,column:5}},line:213},"34":{name:"(anonymous_34)",decl:{start:{line:218,column:28},end:{line:218,column:29}},loc:{start:{line:218,column:36},end:{line:225,column:5}},line:218},"35":{name:"(anonymous_35)",decl:{start:{line:221,column:122},end:{line:221,column:123}},loc:{start:{line:221,column:141},end:{line:224,column:7}},line:221},"36":{name:"(anonymous_36)",decl:{start:{line:226,column:62},end:{line:226,column:63}},loc:{start:{line:226,column:70},end:{line:234,column:5}},line:226},"37":{name:"(anonymous_37)",decl:{start:{line:229,column:122},end:{line:229,column:123}},loc:{start:{line:229,column:141},end:{line:233,column:7}},line:229}},branchMap:{"0":{loc:{start:{line:17,column:46},end:{line:17,column:92}},type:"cond-expr",locations:[{start:{line:17,column:70},end:{line:17,column:73}},{start:{line:17,column:76},end:{line:17,column:92}}],line:17},"1":{loc:{start:{line:17,column:46},end:{line:17,column:67}},type:"binary-expr",locations:[{start:{line:17,column:46},end:{line:17,column:49}},{start:{line:17,column:53},end:{line:17,column:67}}],line:17},"2":{loc:{start:{line:78,column:8},end:{line:78,column:34}},type:"if",locations:[{start:{line:78,column:8},end:{line:78,column:34}},{start:{line:78,column:8},end:{line:78,column:34}}],line:78}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,sources:["post_test.js"],names:["require","config","user","autToken","id","chai","should","use","chaiHttp","describe","before","done","dbURI","process","env","DB_USER","DB_PASSWORD","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","responseult","console","log","catch","error","connection","dropCollection","it","newUser","User","username","email","password","request","server","post","send","end","err","response","have","status","body","be","a","property","eql","logInUser","Token","userToken","Post","title","content","save","set","get","message","eq","postId","responseponse","patch","after","delete"],mappings:"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",sourceRoot:"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/",sourcesContent:["import mongoose from 'mongoose';\nimport chai from 'chai';\nimport server from \"../index\";\nimport chaiHttp from \"chai-http\";\nimport {Post} from \"../models/Post\";\nrequire(\"dotenv\").config();\n\n\n//to mock a function during testing\nimport sinon from 'sinon'\nimport { User } from '../models/User';\n\nlet user, autToken, id;\n\n//assertion style\nchai.should();\n\nchai.use(chaiHttp)  \n    \n    \ndescribe('Test for Post Endpoints', ()=>{\n    before(function(done) {\n        // Connect to MongoDB database\n    const dbURI =`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`\n    mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true}).then((responseult)=>{\n\n            console.log('Db Connected!')\n\n            done();\n            \n        }).catch((error)=>{\n            console.log(error)\n        })\n\n\n    });   \n    \n    \n    /**\n     * POST a post route\n     */\n\ndescribe(\"POST /api/posts\", ()=>{\n    before(()=>{\n        mongoose.connection.dropCollection('users')\n        mongoose.connection.dropCollection('posts')\n    })\n   \n    \n\n    // create user and login \n    it('creates new user ', (done)=>{\n\n        const newUser = new User({\n            username:\"menase\",\n            email:\"menase@mail.com\",\n            password:\"password test\"\n       \n        })\n\n        chai.request(server)\n        .post(\"/api/users\")\n        .send(newUser)\n        .end((err, response)=>{\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"user created!\");\n        done();   \n        })\n    })\n\n\n    // login\n    const logInUser = {\n        username:'menase',\n        password:'password test'\n    }\n\n    it('login a user', (done)=>{\n        chai.request(server)\n        .post('/api/users/login')\n        .send({username:logInUser.username, password:logInUser.password})\n        .end(function(err, response) {\n            if (err) return done(err);\n\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            autToken = response.body.Token\n            \n            done();\n        });\n\n    })\n\n    it(\"creates a new post\", (done)=>{\n        const userToken = 'Bearer ' + autToken\n        \n        const post = new Post({\n            title: \"unit testing\",\n            content: \"I am testing nodejs api using mocha with chai assertion library\"\n            \n        })\n        post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n    \n        //set the auth header with our token\n        .set('Authorization', 'Bearer ' + autToken)\n        .send(post)\n        .end(function(error, response) {\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Post Saved successfully\");\n\n            id= post.id\n        done();  \n        });\n    })\n        \n\n    const userToken = 'Bearer ' + autToken\n\n    it(\"fails to create a post due to unathorized user\", (done)=>{\n\n        const post = new Post({\n            title: \"keza testing \",\n            content: \"unit testing with mocha and user keza\"\n            \n        })\n        // post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n        .send(post)\n        //set the auth header with our token\n        .set('Authorization', userToken)\n        .end(function(error, response) {\n            response.should.have.status(403);\n            response.body.should.have.property('message').eql(\"Invalid token\");\n        done();  \n        });\n       \n        \n    }) \n\n    it(\"do not create a post without title and content\", (done)=>{\n\n        const post = new Post({\n            title: \"\",\n            content: \"\"\n            \n        })\n        // post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n    \n        //set the auth header with our token\n        .set('Authorization', 'Bearer ' + autToken)\n        .send(post)\n        .end(function(error, response) {\n            response.should.have.status(400);\n            response.body.should.have.property('message').eql(\"Title and content are required\")\n        done();  \n        });\n    })\n\n        \n}) \n    \n    \n    /**\n     * test GET posts route\n     */\n\n  describe(\"GET /api/posts\", ()=>{\n        \n    it(\"returns all posts\", (done)=>{\n        chai.request(server)\n        .get(\"/api/posts\")\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.message.should.be.eq(\"Fetched successfully\")\n        done();\n        })\n        \n    })\n\n    it(\"not returns all posts\", (done)=>{\n        chai.request(server)\n        .get(\"/api/post\")\n        .end((err, response)=>{\n            response.should.have.status(404);\n\n        done();\n        })\n        \n    })\n\n    \n});\n\n/**\n * test GET(by id) post route\n */\n\ndescribe(\"GET /api/posts/:id\", ()=>{\n    \n    it(\"returns a single post\", (done)=>{\n        const postId = id;\n        chai.request(server)\n        .get(`/api/posts/${postId}`)\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            response.body.message.should.be.eq(\"successfully fetched\")\n            \n        done();\n        })\n        \n    });\n\n    \n    it(\"not returns a single post at this id\", (done)=>{\n        const postId = 1234;\n        chai.request(server)\n        .get(`/api/posts/${postId}`)\n        .end((err, responseponse)=>{\n            responseponse.should.have.status(404);\n            responseponse.body.error.should.be.eq(\"Post does not exist!\")\n            \n        done();\n        })\n        \n    })\n})\n\n\n\n    /**\n     * PUT a post route\n     */\n\n describe('PUT /api/posts/:id', ()=>{\n    it('updates a post', (done)=>{\n        \n        const postId = id\n        const post = {\n            title: \"unit testing\",\n            content: \"mocha Js framework for testing\",\n            \n        }\n        chai.request(server)\n        .patch(`/api/posts/${postId}`)\n        .send(post)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Post successfully updated!\")\n            \n        done();\n        })\n    })\n\n    it('don\\'t updates a post when title or content is empty', (done)=>{\n        \n        const postId = id\n        const post = {\n            title: \"avicii\",\n            content: \"\",\n            \n        }\n        chai.request(server)\n        .patch(`/api/posts/${postId}`)\n        .send(post)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(400);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Title and content need value!\")\n            \n        done();\n        })\n    })\n\n\n})\n\n    /**\n     * DELETE post route\n     */\n\n  describe('DELETE /api/posts/:id', ()=>{\n      after(()=>{\n        mongoose.connection.dropCollection('users') \n        mongoose.connection.dropCollection('posts')\n      })\n    \n\n    it('It deletes a post', (done)=>{\n        const postId = id;\n        chai.request(server)\n        .delete(`/api/posts/${postId}`)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(200);\n\n        done();\n        })\n    })\n\n    it('It should not delete post that doesn\\'t exist in DB', (done)=>{\n        const postId = id;\n        chai.request(server)\n        .delete(`/api/posts/${postId}`)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(404);\n            response.body.should.have.property('error').eql(\"Post doesn't exist!\")\n        done();\n        })\n    })\n\n    \n\n})\n\n})"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"850f28e225f32975189c634ddcd383df60a4d1db"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2cxxeu1fey=function(){return actualCoverage;};}return actualCoverage;}cov_2cxxeu1fey();var _mongoose=(cov_2cxxeu1fey().s[0]++,_interopRequireDefault(require("mongoose")));var _chai=(cov_2cxxeu1fey().s[1]++,_interopRequireDefault(require("chai")));var _index=(cov_2cxxeu1fey().s[2]++,_interopRequireDefault(require("../index")));var _chaiHttp=(cov_2cxxeu1fey().s[3]++,_interopRequireDefault(require("chai-http")));var _Post=(cov_2cxxeu1fey().s[4]++,require("../models/Post"));var _sinon=(cov_2cxxeu1fey().s[5]++,_interopRequireDefault(require("sinon")));var _User=(cov_2cxxeu1fey().s[6]++,require("../models/User"));function _interopRequireDefault(obj){cov_2cxxeu1fey().f[0]++;cov_2cxxeu1fey().s[7]++;return(cov_2cxxeu1fey().b[1][0]++,obj)&&(cov_2cxxeu1fey().b[1][1]++,obj.__esModule)?(cov_2cxxeu1fey().b[0][0]++,obj):(cov_2cxxeu1fey().b[0][1]++,{default:obj});}cov_2cxxeu1fey().s[8]++;require("dotenv").config();//to mock a function during testing
let user,autToken,id;//assertion style
cov_2cxxeu1fey().s[9]++;_chai.default.should();cov_2cxxeu1fey().s[10]++;_chai.default.use(_chaiHttp.default);cov_2cxxeu1fey().s[11]++;describe('Test for Post Endpoints',()=>{cov_2cxxeu1fey().f[1]++;cov_2cxxeu1fey().s[12]++;before(function(done){cov_2cxxeu1fey().f[2]++;// Connect to MongoDB database
const dbURI=(cov_2cxxeu1fey().s[13]++,`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`);cov_2cxxeu1fey().s[14]++;_mongoose.default.connect(dbURI,{useNewUrlParser:true,useUnifiedTopology:true}).then(responseult=>{cov_2cxxeu1fey().f[3]++;cov_2cxxeu1fey().s[15]++;console.log('Db Connected!');cov_2cxxeu1fey().s[16]++;done();}).catch(error=>{cov_2cxxeu1fey().f[4]++;cov_2cxxeu1fey().s[17]++;console.log(error);});});/**
   * POST a post route
   */cov_2cxxeu1fey().s[18]++;describe("POST /api/posts",()=>{cov_2cxxeu1fey().f[5]++;cov_2cxxeu1fey().s[19]++;before(()=>{cov_2cxxeu1fey().f[6]++;cov_2cxxeu1fey().s[20]++;_mongoose.default.connection.dropCollection('users');cov_2cxxeu1fey().s[21]++;_mongoose.default.connection.dropCollection('posts');});// create user and login 
cov_2cxxeu1fey().s[22]++;it('creates new user ',done=>{cov_2cxxeu1fey().f[7]++;const newUser=(cov_2cxxeu1fey().s[23]++,new _User.User({username:"menase",email:"menase@mail.com",password:"password test"}));cov_2cxxeu1fey().s[24]++;_chai.default.request(_index.default).post("/api/users").send(newUser).end((err,response)=>{cov_2cxxeu1fey().f[8]++;cov_2cxxeu1fey().s[25]++;response.should.have.status(201);cov_2cxxeu1fey().s[26]++;response.body.should.be.a('object');cov_2cxxeu1fey().s[27]++;response.body.should.have.property('message').eql("user created!");cov_2cxxeu1fey().s[28]++;done();});});// login
const logInUser=(cov_2cxxeu1fey().s[29]++,{username:'menase',password:'password test'});cov_2cxxeu1fey().s[30]++;it('login a user',done=>{cov_2cxxeu1fey().f[9]++;cov_2cxxeu1fey().s[31]++;_chai.default.request(_index.default).post('/api/users/login').send({username:logInUser.username,password:logInUser.password}).end(function(err,response){cov_2cxxeu1fey().f[10]++;cov_2cxxeu1fey().s[32]++;if(err){cov_2cxxeu1fey().b[2][0]++;cov_2cxxeu1fey().s[33]++;return done(err);}else{cov_2cxxeu1fey().b[2][1]++;}cov_2cxxeu1fey().s[34]++;response.should.have.status(200);cov_2cxxeu1fey().s[35]++;response.body.should.be.a('object');cov_2cxxeu1fey().s[36]++;autToken=response.body.Token;cov_2cxxeu1fey().s[37]++;done();});});cov_2cxxeu1fey().s[38]++;it("creates a new post",done=>{cov_2cxxeu1fey().f[11]++;const userToken=(cov_2cxxeu1fey().s[39]++,'Bearer '+autToken);const post=(cov_2cxxeu1fey().s[40]++,new _Post.Post({title:"unit testing",content:"I am testing nodejs api using mocha with chai assertion library"}));cov_2cxxeu1fey().s[41]++;post.save();cov_2cxxeu1fey().s[42]++;_chai.default.request(_index.default).post("/api/posts")//set the auth header with our token
.set('Authorization','Bearer '+autToken).send(post).end(function(error,response){cov_2cxxeu1fey().f[12]++;cov_2cxxeu1fey().s[43]++;response.should.have.status(201);cov_2cxxeu1fey().s[44]++;response.body.should.be.a('object');cov_2cxxeu1fey().s[45]++;response.body.should.have.property('message').eql("Post Saved successfully");cov_2cxxeu1fey().s[46]++;id=post.id;cov_2cxxeu1fey().s[47]++;done();});});const userToken=(cov_2cxxeu1fey().s[48]++,'Bearer '+autToken);cov_2cxxeu1fey().s[49]++;it("fails to create a post due to unathorized user",done=>{cov_2cxxeu1fey().f[13]++;const post=(cov_2cxxeu1fey().s[50]++,new _Post.Post({title:"keza testing ",content:"unit testing with mocha and user keza"}));// post.save()
cov_2cxxeu1fey().s[51]++;_chai.default.request(_index.default).post("/api/posts").send(post)//set the auth header with our token
.set('Authorization',userToken).end(function(error,response){cov_2cxxeu1fey().f[14]++;cov_2cxxeu1fey().s[52]++;response.should.have.status(403);cov_2cxxeu1fey().s[53]++;response.body.should.have.property('message').eql("Invalid token");cov_2cxxeu1fey().s[54]++;done();});});cov_2cxxeu1fey().s[55]++;it("do not create a post without title and content",done=>{cov_2cxxeu1fey().f[15]++;const post=(cov_2cxxeu1fey().s[56]++,new _Post.Post({title:"",content:""}));// post.save()
cov_2cxxeu1fey().s[57]++;_chai.default.request(_index.default).post("/api/posts")//set the auth header with our token
.set('Authorization','Bearer '+autToken).send(post).end(function(error,response){cov_2cxxeu1fey().f[16]++;cov_2cxxeu1fey().s[58]++;response.should.have.status(400);cov_2cxxeu1fey().s[59]++;response.body.should.have.property('message').eql("Title and content are required");cov_2cxxeu1fey().s[60]++;done();});});});/**
   * test GET posts route
   */cov_2cxxeu1fey().s[61]++;describe("GET /api/posts",()=>{cov_2cxxeu1fey().f[17]++;cov_2cxxeu1fey().s[62]++;it("returns all posts",done=>{cov_2cxxeu1fey().f[18]++;cov_2cxxeu1fey().s[63]++;_chai.default.request(_index.default).get("/api/posts").end((err,response)=>{cov_2cxxeu1fey().f[19]++;cov_2cxxeu1fey().s[64]++;response.should.have.status(200);cov_2cxxeu1fey().s[65]++;response.body.message.should.be.eq("Fetched successfully");cov_2cxxeu1fey().s[66]++;done();});});cov_2cxxeu1fey().s[67]++;it("not returns all posts",done=>{cov_2cxxeu1fey().f[20]++;cov_2cxxeu1fey().s[68]++;_chai.default.request(_index.default).get("/api/post").end((err,response)=>{cov_2cxxeu1fey().f[21]++;cov_2cxxeu1fey().s[69]++;response.should.have.status(404);cov_2cxxeu1fey().s[70]++;done();});});});/**
   * test GET(by id) post route
   */cov_2cxxeu1fey().s[71]++;describe("GET /api/posts/:id",()=>{cov_2cxxeu1fey().f[22]++;cov_2cxxeu1fey().s[72]++;it("returns a single post",done=>{cov_2cxxeu1fey().f[23]++;const postId=(cov_2cxxeu1fey().s[73]++,id);cov_2cxxeu1fey().s[74]++;_chai.default.request(_index.default).get(`/api/posts/${postId}`).end((err,response)=>{cov_2cxxeu1fey().f[24]++;cov_2cxxeu1fey().s[75]++;response.should.have.status(200);cov_2cxxeu1fey().s[76]++;response.body.should.be.a('object');cov_2cxxeu1fey().s[77]++;response.body.message.should.be.eq("successfully fetched");cov_2cxxeu1fey().s[78]++;done();});});cov_2cxxeu1fey().s[79]++;it("not returns a single post at this id",done=>{cov_2cxxeu1fey().f[25]++;const postId=(cov_2cxxeu1fey().s[80]++,1234);cov_2cxxeu1fey().s[81]++;_chai.default.request(_index.default).get(`/api/posts/${postId}`).end((err,responseponse)=>{cov_2cxxeu1fey().f[26]++;cov_2cxxeu1fey().s[82]++;responseponse.should.have.status(404);cov_2cxxeu1fey().s[83]++;responseponse.body.error.should.be.eq("Post does not exist!");cov_2cxxeu1fey().s[84]++;done();});});});/**
   * PUT a post route
   */cov_2cxxeu1fey().s[85]++;describe('PUT /api/posts/:id',()=>{cov_2cxxeu1fey().f[27]++;cov_2cxxeu1fey().s[86]++;it('updates a post',done=>{cov_2cxxeu1fey().f[28]++;const postId=(cov_2cxxeu1fey().s[87]++,id);const post=(cov_2cxxeu1fey().s[88]++,{title:"unit testing",content:"mocha Js framework for testing"});cov_2cxxeu1fey().s[89]++;_chai.default.request(_index.default).patch(`/api/posts/${postId}`).send(post).set('Authorization','Bearer '+autToken).end((err,response)=>{cov_2cxxeu1fey().f[29]++;cov_2cxxeu1fey().s[90]++;response.should.have.status(200);cov_2cxxeu1fey().s[91]++;response.body.should.be.a('object');cov_2cxxeu1fey().s[92]++;response.body.should.have.property('message').eql("Post successfully updated!");cov_2cxxeu1fey().s[93]++;done();});});cov_2cxxeu1fey().s[94]++;it('don\'t updates a post when title or content is empty',done=>{cov_2cxxeu1fey().f[30]++;const postId=(cov_2cxxeu1fey().s[95]++,id);const post=(cov_2cxxeu1fey().s[96]++,{title:"avicii",content:""});cov_2cxxeu1fey().s[97]++;_chai.default.request(_index.default).patch(`/api/posts/${postId}`).send(post).set('Authorization','Bearer '+autToken).end((err,response)=>{cov_2cxxeu1fey().f[31]++;cov_2cxxeu1fey().s[98]++;response.should.have.status(400);cov_2cxxeu1fey().s[99]++;response.body.should.be.a('object');cov_2cxxeu1fey().s[100]++;response.body.should.have.property('message').eql("Title and content need value!");cov_2cxxeu1fey().s[101]++;done();});});});/**
   * DELETE post route
   */cov_2cxxeu1fey().s[102]++;describe('DELETE /api/posts/:id',()=>{cov_2cxxeu1fey().f[32]++;cov_2cxxeu1fey().s[103]++;after(()=>{cov_2cxxeu1fey().f[33]++;cov_2cxxeu1fey().s[104]++;_mongoose.default.connection.dropCollection('users');cov_2cxxeu1fey().s[105]++;_mongoose.default.connection.dropCollection('posts');});cov_2cxxeu1fey().s[106]++;it('It deletes a post',done=>{cov_2cxxeu1fey().f[34]++;const postId=(cov_2cxxeu1fey().s[107]++,id);cov_2cxxeu1fey().s[108]++;_chai.default.request(_index.default).delete(`/api/posts/${postId}`).set('Authorization','Bearer '+autToken).end((err,response)=>{cov_2cxxeu1fey().f[35]++;cov_2cxxeu1fey().s[109]++;response.should.have.status(200);cov_2cxxeu1fey().s[110]++;done();});});cov_2cxxeu1fey().s[111]++;it('It should not delete post that doesn\'t exist in DB',done=>{cov_2cxxeu1fey().f[36]++;const postId=(cov_2cxxeu1fey().s[112]++,id);cov_2cxxeu1fey().s[113]++;_chai.default.request(_index.default).delete(`/api/posts/${postId}`).set('Authorization','Bearer '+autToken).end((err,response)=>{cov_2cxxeu1fey().f[37]++;cov_2cxxeu1fey().s[114]++;response.should.have.status(404);cov_2cxxeu1fey().s[115]++;response.body.should.have.property('error').eql("Post doesn't exist!");cov_2cxxeu1fey().s[116]++;done();});});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,