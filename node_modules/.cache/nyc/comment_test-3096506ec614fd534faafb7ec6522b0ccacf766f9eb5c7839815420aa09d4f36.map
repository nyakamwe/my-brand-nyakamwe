{"version":3,"sources":["comment_test.js"],"names":["require","config","user","autToken","id","cId","chai","should","use","chaiHttp","describe","before","done","dbURI","process","env","DB_USER","DB_PASSWORD","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","responseult","console","log","catch","error","connection","dropCollection","it","newUser","User","username","email","password","request","server","post","send","end","err","response","have","status","body","be","a","property","eql","logInUser","Token","userToken","Post","title","content","save","set","postId","newComment","Comment","description","get","commentId","delete"],"mappings":"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","sourceRoot":"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/","sourcesContent":["import mongoose from 'mongoose';\nimport chai from 'chai';\nimport server from \"../index\";\nimport chaiHttp from \"chai-http\";\nimport {Post,Comment} from \"../models/Post\";\nrequire(\"dotenv\").config();\n\n\n//to mock a function during testing\nimport sinon from 'sinon'\nimport { User } from '../models/User';\n\nlet user, autToken, id, cId;\n\n//assertion style\nchai.should();\n\nchai.use(chaiHttp)  \n    \n    \ndescribe('Test for Comment Endpoints', ()=>{\n    before(function(done) {\n        // Connect to MongoDB database\n    const dbURI =`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`\n    mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true}).then((responseult)=>{\n\n            console.log('Db Connected!')\n\n            done();\n            \n        }).catch((error)=>{\n            console.log(error)\n        })\n\n\n    });  \n\n    /**\n    * POST comment route\n    */\n\n     describe('POST /api/posts/:id/comment', ()=>{\n         before(()=>{\n             mongoose.connection.dropCollection('users')\n             mongoose.connection.dropCollection('comments')\n         })\n\n        // create user and login \n    it('creates new user ', (done)=>{\n\n        const newUser = new User({\n            username:\"menase\",\n            email:\"menase@mail.com\",\n            password:\"password test\"\n       \n        })\n\n        chai.request(server)\n        .post(\"/api/users\")\n        .send(newUser)\n        .end((err, response)=>{\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"user created!\");\n        done();   \n        })\n    })\n\n    // login\n    const logInUser = {\n        username:'menase',\n        password:'password test'\n    }\n\n    it('login a user', (done)=>{\n        chai.request(server)\n        .post('/api/users/login')\n        .send({username:logInUser.username, password:logInUser.password})\n        .end(function(err, response) {\n            if (err) return done(err);\n\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            autToken = response.body.Token\n            \n            done();\n        });\n\n    })\n\n    //post creation\n    it(\"creates a new post\", (done)=>{\n        const userToken = 'Bearer ' + autToken\n        \n        const post = new Post({\n            title: \"unit testing\",\n            content: \"I am testing nodejs api using mocha with chai assertion library\"\n            \n        })\n        post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n    \n        //set the auth header with our token\n        .set('Authorization', 'Bearer ' + autToken)\n        .send(post)\n        .end(function(error, response) {\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Post Saved successfully\");\n\n            id= post.id\n        done();  \n        });\n    })\n\n\n    it('comment on a post', (done)=>{\n        const postId = id;\n        const newComment = new Comment({\n            postId,\n            description:\"testing a comment\"\n        });\n\n        newComment.save()\n\n        chai.request(server)\n        .post(`/api/posts/${postId}/comment`)\n        .send(newComment)\n        .set('Authorization', 'Bearer ' + autToken )\n        .end((err, response)=>{\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('comment')\n            \n            cId = newComment.id\n        done();\n        })\n    })\n\n\n    it('handles when you want to comment on non existing post', (done)=>{\n        const postId = \"62597f8412f8da13b4e0a385\"\n        const newComment ={\n            postId,\n            description:\"testing a comment\"\n        };\n        chai.request(server)\n        .post(`/api/posts/${postId}/comment`)\n        .send(newComment)\n        .set('Authorization', 'Bearer ' + autToken )\n        .end((err, response)=>{\n            response.should.have.status(404);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Post not available\");\n        done();\n        })\n    })\n\n    })\n  \n    /**\n     * GET comment route\n    */\n\n    describe('GET /api/posts/:id/comment', ()=>{\n\n    it('shows all comments related to specific post', (done)=>{\n            const postId = id\n            chai.request(server)\n            .get(`/api/posts/${postId}/comment`)\n            .send({postId})\n            .end((err, response)=>{\n                response.should.have.status(200);\n                response.body.should.have.a('object')\n            done();\n            })\n    })\n\n    it('show error when that post in not in DB', (done)=>{\n        \n        const postId = \"625b07c93cc2f2b0163f1a75\"\n        chai.request(server)\n        .get(`/api/posts/${postId}/comment`)\n        .send({postId})\n        .end((err, response)=>{\n            response.should.have.status(404);\n            response.body.should.have.property('message').eql(\"post not found\")\n        done();\n        })\n    })\n\n    \n\n        \n    it('shows individual comment', (done)=>{\n        const commentId = cId\n        chai.request(server)\n        .get(`/api/comments/${commentId}`)\n        .send({commentId})\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.be.a('object')\n            response.body.should.have.property('comment')\n        done();\n        })\n    })\n\n    it('shows error for non existing comment', (done)=>{\n        const commentId = \"625943e64e9dd47477f9be96\"\n        chai.request(server)\n        .get(`/api/comments/${commentId}`)\n        .send({commentId})\n        .end((err, response)=>{\n            response.should.have.status(404);\n            response.body.should.be.a('object')\n            response.body.should.have.property('comment').eql(\"Comment Doesn't Exists\")\n        done();\n        })\n    })\n\n        \n        \n    })\n\n\n    /**\n     * DELETE comment route\n     */\n\n    describe('DELETE /api/comments/:id', ()=>{\n        it('deletes comment on a post', (done)=>{\n            const commentId = cId\n            chai.request(server)\n            .delete(`/api/comments/${commentId}`)\n            .set('Authorization', 'Bearer ' + autToken )\n            .end((err, response)=>{\n                response.should.have.status(200);\n                \n            done();\n            })\n        })\n\n        it('handles when you want to delete non existing comment', (done)=>{\n            const commentId = \"625943e64e9dd47477f9be96\"\n            chai.request(server)\n            .delete(`/api/comments/${commentId}`)\n            .set('Authorization', 'Bearer ' + autToken )\n            .end((err, response)=>{\n                response.should.have.status(404);\n                response.body.should.have.property('message').eql(\"Comment doesn't exist\")\n            done();\n            })\n        })\n\n    })\n})    "]}