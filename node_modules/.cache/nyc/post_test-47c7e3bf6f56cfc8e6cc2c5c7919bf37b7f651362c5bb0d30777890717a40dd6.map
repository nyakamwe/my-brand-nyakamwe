{"version":3,"sources":["post_test.js"],"names":["require","config","user","autToken","id","chai","should","use","chaiHttp","describe","before","done","dbURI","process","env","DB_USER","DB_PASSWORD","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","responseult","console","log","catch","error","connection","dropCollection","it","newUser","User","username","email","password","request","server","post","send","end","err","response","have","status","body","be","a","property","eql","logInUser","Token","userToken","Post","title","content","save","set","get","message","eq","postId","responseponse","patch","after","delete"],"mappings":"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","sourceRoot":"/home/nyakamwe/Desktop/my-brand-nyakamwe/server/src/test/","sourcesContent":["import mongoose from 'mongoose';\nimport chai from 'chai';\nimport server from \"../index\";\nimport chaiHttp from \"chai-http\";\nimport {Post} from \"../models/Post\";\nrequire(\"dotenv\").config();\n\n\n//to mock a function during testing\nimport sinon from 'sinon'\nimport { User } from '../models/User';\n\nlet user, autToken, id;\n\n//assertion style\nchai.should();\n\nchai.use(chaiHttp)  \n    \n    \ndescribe('Test for Post Endpoints', ()=>{\n    before(function(done) {\n        // Connect to MongoDB database\n    const dbURI =`mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@node-applications.fe4au.mongodb.net/node-tutorial?retryWrites=true&w=majority`\n    mongoose.connect(dbURI,{useNewUrlParser:true, useUnifiedTopology:true}).then((responseult)=>{\n\n            console.log('Db Connected!')\n\n            done();\n            \n        }).catch((error)=>{\n            console.log(error)\n        })\n\n\n    });   \n    \n    \n    /**\n     * POST a post route\n     */\n\ndescribe(\"POST /api/posts\", ()=>{\n    before(()=>{\n        mongoose.connection.dropCollection('users')\n        mongoose.connection.dropCollection('posts')\n    })\n   \n    \n\n    // create user and login \n    it('creates new user ', (done)=>{\n\n        const newUser = new User({\n            username:\"menase\",\n            email:\"menase@mail.com\",\n            password:\"password test\"\n       \n        })\n\n        chai.request(server)\n        .post(\"/api/users\")\n        .send(newUser)\n        .end((err, response)=>{\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"user created!\");\n        done();   \n        })\n    })\n\n\n    // login\n    const logInUser = {\n        username:'menase',\n        password:'password test'\n    }\n\n    it('login a user', (done)=>{\n        chai.request(server)\n        .post('/api/users/login')\n        .send({username:logInUser.username, password:logInUser.password})\n        .end(function(err, response) {\n            if (err) return done(err);\n\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            autToken = response.body.Token\n            \n            done();\n        });\n\n    })\n\n    it(\"creates a new post\", (done)=>{\n        const userToken = 'Bearer ' + autToken\n        \n        const post = new Post({\n            title: \"unit testing\",\n            content: \"I am testing nodejs api using mocha with chai assertion library\"\n            \n        })\n        post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n    \n        //set the auth header with our token\n        .set('Authorization', 'Bearer ' + autToken)\n        .send(post)\n        .end(function(error, response) {\n            response.should.have.status(201);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Post Saved successfully\");\n\n            id= post.id\n        done();  \n        });\n    })\n        \n\n    const userToken = 'Bearer ' + autToken\n\n    it(\"fails to create a post due to unathorized user\", (done)=>{\n\n        const post = new Post({\n            title: \"keza testing \",\n            content: \"unit testing with mocha and user keza\"\n            \n        })\n        // post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n        .send(post)\n        //set the auth header with our token\n        .set('Authorization', userToken)\n        .end(function(error, response) {\n            response.should.have.status(403);\n            response.body.should.have.property('message').eql(\"Invalid token\");\n        done();  \n        });\n       \n        \n    }) \n\n    it(\"do not create a post without title and content\", (done)=>{\n\n        const post = new Post({\n            title: \"\",\n            content: \"\"\n            \n        })\n        // post.save()\n        \n        chai.request(server)\n        .post(\"/api/posts\")\n    \n        //set the auth header with our token\n        .set('Authorization', 'Bearer ' + autToken)\n        .send(post)\n        .end(function(error, response) {\n            response.should.have.status(400);\n            response.body.should.have.property('message').eql(\"Title and content are required\")\n        done();  \n        });\n    })\n\n        \n}) \n    \n    \n    /**\n     * test GET posts route\n     */\n\n  describe(\"GET /api/posts\", ()=>{\n        \n    it(\"returns all posts\", (done)=>{\n        chai.request(server)\n        .get(\"/api/posts\")\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.message.should.be.eq(\"Fetched successfully\")\n        done();\n        })\n        \n    })\n\n    it(\"not returns all posts\", (done)=>{\n        chai.request(server)\n        .get(\"/api/post\")\n        .end((err, response)=>{\n            response.should.have.status(404);\n\n        done();\n        })\n        \n    })\n\n    \n});\n\n/**\n * test GET(by id) post route\n */\n\ndescribe(\"GET /api/posts/:id\", ()=>{\n    \n    it(\"returns a single post\", (done)=>{\n        const postId = id;\n        chai.request(server)\n        .get(`/api/posts/${postId}`)\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            response.body.message.should.be.eq(\"successfully fetched\")\n            \n        done();\n        })\n        \n    });\n\n    \n    it(\"not returns a single post at this id\", (done)=>{\n        const postId = 1234;\n        chai.request(server)\n        .get(`/api/posts/${postId}`)\n        .end((err, responseponse)=>{\n            responseponse.should.have.status(404);\n            responseponse.body.error.should.be.eq(\"Post does not exist!\")\n            \n        done();\n        })\n        \n    })\n})\n\n\n\n    /**\n     * PUT a post route\n     */\n\n describe('PUT /api/posts/:id', ()=>{\n    it('updates a post', (done)=>{\n        \n        const postId = id\n        const post = {\n            title: \"unit testing\",\n            content: \"mocha Js framework for testing\",\n            \n        }\n        chai.request(server)\n        .patch(`/api/posts/${postId}`)\n        .send(post)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(200);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Post successfully updated!\")\n            \n        done();\n        })\n    })\n\n    it('don\\'t updates a post when title or content is empty', (done)=>{\n        \n        const postId = id\n        const post = {\n            title: \"avicii\",\n            content: \"\",\n            \n        }\n        chai.request(server)\n        .patch(`/api/posts/${postId}`)\n        .send(post)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(400);\n            response.body.should.be.a('object');\n            response.body.should.have.property('message').eql(\"Title and content need value!\")\n            \n        done();\n        })\n    })\n\n\n})\n\n    /**\n     * DELETE post route\n     */\n\n  describe('DELETE /api/posts/:id', ()=>{\n      after(()=>{\n        mongoose.connection.dropCollection('users') \n        mongoose.connection.dropCollection('posts')\n      })\n    \n\n    it('It deletes a post', (done)=>{\n        const postId = id;\n        chai.request(server)\n        .delete(`/api/posts/${postId}`)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(200);\n\n        done();\n        })\n    })\n\n    it('It should not delete post that doesn\\'t exist in DB', (done)=>{\n        const postId = id;\n        chai.request(server)\n        .delete(`/api/posts/${postId}`)\n        .set('Authorization', 'Bearer ' + autToken)\n        .end((err, response)=>{\n            response.should.have.status(404);\n            response.body.should.have.property('error').eql(\"Post doesn't exist!\")\n        done();\n        })\n    })\n\n    \n\n})\n\n})"]}